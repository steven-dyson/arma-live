/***************************************************************************
Gain Punish
Created by Spyder
spyder@armalive.com
****************************************************************************/



/***************************************************************************
Init
****************************************************************************/
private ["_uid", "_varName", "_reset", "_events", "_punishTime", "_currentScore", "_penalty", "_disabledTime", "_pName", "_uplink", "_punishPoints", "_stackDelay"];

if ((!SPY_roe_enabled)) exitWith {};

_uid = (player getVariable "SPY_id_player" select 0);
_varName = (format ["SPY_roe_%1", _uid]);
_reset = 1;
/***************************************************************************
End
****************************************************************************/



/***************************************************************************
Monitor
****************************************************************************/
while {true} do {
	
	// INITAL ROE VIOLATION
	waitUntil {sleep 0.1; (((SPY_container getVariable ("SPY_roe_" + _uid)) select 0) > 0)};
	
	_reset = 0;

	// While punish timeout has not reset values
	while {_reset == 0} do {
	
		_currentValues = (SPY_container getVariable _varName);
		_punishes = ((_currentValues select 0) + 1);
		_locks = (_currentValues select 1);

		// Add lock and check if ban is required
		if ((_locks > SPY_roe_locksLimit) && (SPY_roe_banOnExcessiveLocks)) then {
		
			// Attempt to ban violator from admin computer
			[[player, "Server", "Multiple ROE Violation Locks", "banned"], "SPY_clientKick", true, false] call BIS_fnc_MP;
		
		};
		
		// ROE VIOLATION STACKING PENALTY
		if ((_punishes > 1)) then {		
			
			if ((time < _stackDelay)) exitWith {};
			
			_penalty = (_punishes * 3);
		
		};

		// EXCESSIVE ROE VIOLATIONS
		if ((_punishes > SPY_roe_punishLimit)) then {
		
			_disabledTime = (_punishes * 10);
			_pName = (player getVariable "SPY_id_player" select 1);
			
			// Add lock value
			_locks = ((_currentValues select 1) + 1);
			
			// Send message to all clients
			_null = [4, (format ["%1 is flagged for excessive ROE violations", _pName]), "CLIENT", false] spawn SPY_bMessage;
			
			// Post ROE flag to uplink
			_uplink = (format ["bstats_roeflag (%1, %2)", _uid, time]);
			_null = [[_uplink], "_this call uplink_exec", "SERVER"] spawn CAS_mpCB;
			
			// Disable the users input for severity
			disableUserInput true;
			
			// Update remaining lock time on screen
			while {_disabledTime > 0} do {
			
				_null = [(format ["USER INPUT DISABLED FOR EXCESSIVE ROE VIOLATIONS (%1)", ([_disabledTime] call CAS_formatTime)]), "LOCAL", 999] spawn SPY_bInfoScreen;
				
				sleep 1;
				
				// Recheck for additional punishments that may have not processed
				_currentValues = (SPY_container getVariable _varName);
				_punishes = (_currentValues select 0);
				_disabledTime = ((_punishes * 10) - 1);
			
			};
			
			// Give player written warning
			_null = ["User input enabled, follow the ROE!", "LOCAL", 5] spawn SPY_bInfoScreen;
			
			sleep 10;
			
			// Re-enable user input
			disableUserInput false;
			
		};
		
		// Set punish reset timeout
		_punishTimeout = (time + SPY_roe_punishResetTimout);

		// SET FOR COMPARISON
		_stackDelay = (time + 1);
		
		// Wait for punish reset timeout or another event to occur
		waitUntil {sleep 0.1; (((SPY_container getVariable _varName) select 2) > _punishes) || (time > _punishTimeout)};
		
		// Reset punish value to 0 for good behavior
		if ((time > _punishTimeout)) then {
		
			_reset = 1;
			_currentScore = (SPY_container getVariable _varName);
			SPY_container setVariable [_varName, [0, 0], true];
			
		};
		
	};
		
};
/***************************************************************************
End
****************************************************************************/